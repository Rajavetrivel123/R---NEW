Here's the complete Terraform configuration, including `main.tf`, `variables.tf`, `locals.tf`, `output.tf`, `providers.tf`, and `auto.tfvars`. This setup ensures compliance with your company standards while supporting all routing policies and AWS-managed endpoints like RDS, ALB, and CloudFront.

---

### ðŸ“Œ **File: `providers.tf`**
```hcl
provider "aws" {
  region = "us-east-1"
}
```

---

### ðŸ“Œ **File: `variables.tf`**
```hcl
variable "hosted_zone_name" {
  description = "The name of the private hosted zone"
  type        = string
}

variable "allow_destroy" {
  description = "Allow Terraform to destroy the hosted zone"
  type        = bool
}

variable "is_private" {
  description = "Determines if the hosted zone is private"
  type        = bool
}

variable "vpc_associations" {
  description = "List of VPCs to associate with the private hosted zone"
  type        = list(object({
    vpc_id = string
    region = string
  }))
}

variable "tags" {
  description = "Tags to apply to resources"
  type        = map(string)
}

variable "records" {
  description = "List of DNS records to create"
  type = list(object({
    name                  = string
    type                  = string
    ttl                   = optional(number)
    alias                 = bool
    value_or_alias_target = string
    alias_zone_id         = optional(string)
    routing_policy        = string
    weight                = optional(number)
    failover              = optional(string)
    region                = optional(string)
    continent             = optional(string)
  }))
}

variable "rds_endpoint" {
  description = "RDS database endpoint"
  type        = string
}

variable "custom_cname_target" {
  description = "Custom CNAME target"
  type        = string
}
```

---

### ðŸ“Œ **File: `locals.tf`**
```hcl
locals {
  # Validate and extract domain components
  domain_parts = regex("^([a-zA-Z0-9-_]+)\\.(aws-mani\\.nonprod\\.com)$", var.hosted_zone_name)
  subdomain    = local.domain_parts[0]
  domain       = local.domain_parts[1]

  # Subdomain constraints
  is_valid_subdomain = length(local.subdomain) > 0 && length(local.subdomain) <= 63

  # Restricted words
  restricted_words = ["admin", "test", "demo", "internal"]
  is_valid_name    = alltrue([for word in local.restricted_words : !contains(local.subdomain, word)])
}
```

---

### ðŸ“Œ **File: `main.tf`**
```hcl
# Create Hosted Zone
resource "aws_route53_zone" "this" {
  count   = var.allow_destroy && local.is_valid_subdomain && local.is_valid_name ? 1 : 0
  name    = "${local.subdomain}.${local.domain}"
  comment = "Managed by Terraform - Private Hosted Zone"

  dynamic "vpc" {
    for_each = var.is_private ? var.vpc_associations : []
    content {
      vpc_id     = vpc.value.vpc_id
      vpc_region = vpc.value.region
    }
  }

  tags = merge(var.tags, { "ManagedBy" = "Terraform" })
}

# Create Route53 Records
resource "aws_route53_record" "record" {
  for_each = { for rec in var.records : "${rec.name}-${lookup(rec, "set_identifier", "")}" => rec }
  zone_id  = aws_route53_zone.this[0].zone_id
  name     = each.value.name
  type     = each.value.type
  ttl      = each.value.alias ? null : each.value.ttl

  # Prevent email-related DNS records
  lifecycle {
    precondition {
      condition     = !contains(["MX", "SPF", "TXT", "DKIM"], each.value.type)
      error_message = "Email-related DNS records (MX, SPF, TXT, DKIM) are not allowed."
    }
  }

  # Prevent confidential information
  lifecycle {
    precondition {
      condition     = !can(regex(".*(secret|password|token|key).*", each.value.name))
      error_message = "Confidential information detected in DNS record name."
    }
  }

  records = each.value.alias ? [] : [each.value.value_or_alias_target]

  set_identifier = each.value.routing_policy == "Weighted" || each.value.routing_policy == "Failover" ? each.value.name : null

  dynamic "weighted_routing_policy" {
    for_each = each.value.routing_policy == "Weighted" ? [each.value] : []
    content {
      weight = each.value.weight
    }
  }

  dynamic "failover_routing_policy" {
    for_each = each.value.routing_policy == "Failover" ? [each.value] : []
    content {
      type = each.value.failover
    }
  }

  dynamic "latency_routing_policy" {
    for_each = each.value.routing_policy == "Latency" ? [each.value] : []
    content {
      region = each.value.region
    }
  }

  dynamic "geolocation_routing_policy" {
    for_each = each.value.routing_policy == "Geolocation" ? [each.value] : []
    content {
      continent = each.value.continent
    }
  }

  dynamic "alias" {
    for_each = each.value.alias ? [1] : []
    content {
      name                   = each.value.value_or_alias_target
      zone_id                = each.value.alias_zone_id
      evaluate_target_health = true
    }
  }
}

# RDS Endpoint Record
resource "aws_route53_record" "rds_endpoint" {
  zone_id = aws_route53_zone.this[0].zone_id
  name    = "rds.${local.subdomain}.${local.domain}"
  type    = "CNAME"
  ttl     = 300
  records = [var.rds_endpoint]
}

# Additional CNAME Record
resource "aws_route53_record" "custom_cname" {
  zone_id = aws_route53_zone.this[0].zone_id
  name    = "app.${local.subdomain}.${local.domain}"
  type    = "CNAME"
  ttl     = 300
  records = [var.custom_cname_target]
}
```

---

### ðŸ“Œ **File: `output.tf`**
```hcl
output "hosted_zone_id" {
  description = "The ID of the created hosted zone"
  value       = aws_route53_zone.this[0].id
}

output "hosted_zone_arn" {
  description = "The ARN of the created hosted zone"
  value       = aws_route53_zone.this[0].arn
}
```

---

### ðŸ“Œ **File: `auto.tfvars`**
```hcl
hosted_zone_name = "app.aws-mani.nonprod.com"
allow_destroy    = true
is_private       = true
vpc_associations = [{ vpc_id = "vpc-123456", region = "us-east-1" }]
tags = { "Environment" = "NonProd" }
rds_endpoint = "rds-example.endpoint.amazonaws.com"
custom_cname_target = "app.example.com"
records = [
  {
    name = "simple"
    type = "A"
    ttl = 300
    alias = false
    value_or_alias_target = "192.168.1.1"
    routing_policy = "Simple"
  },
  { 
    name = "latency-us-east-1"
    type = "A"
    ttl = 300
    alias = false
    value_or_alias_target = "192.168.1.6"
    routing_policy = "Latency"
    region = "us-east-1"
  }
]
```

---

This configuration fully supports **private hosted zones**, **all routing policies**, **alias records for AWS services**, and **restricted compliance rules**. ðŸš€ Let me know if you need additional refinements!